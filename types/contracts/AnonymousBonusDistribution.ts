/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AnonymousBonusDistributionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "allocateBonus"
      | "authorizedManagers"
      | "bonuses"
      | "calculateTaxBracket"
      | "claimBonus"
      | "createDistribution"
      | "currentDistributionId"
      | "distributionRounds"
      | "finalizeDistribution"
      | "getBonusStatus"
      | "getCurrentDistributionId"
      | "getDistributionInfo"
      | "getDistributionRecipients"
      | "getMyEncryptedBonus"
      | "hasReceivedBonus"
      | "isAuthorizedManager"
      | "setManagerAuthorization"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BonusAllocated"
      | "BonusClaimed"
      | "DistributionCreated"
      | "DistributionFinalized"
      | "ManagerAuthorized"
      | "ManagerRevoked"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allocateBonus",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedManagers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bonuses",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTaxBracket",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBonus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDistribution",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentDistributionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributionRounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeDistribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBonusStatus",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDistributionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionRecipients",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyEncryptedBonus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasReceivedBonus",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagerAuthorization",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocateBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bonuses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateTaxBracket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimBonus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentDistributionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBonusStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDistributionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyEncryptedBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasReceivedBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagerAuthorization",
    data: BytesLike
  ): Result;
}

export namespace BonusAllocatedEvent {
  export type InputTuple = [
    distributionId: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [distributionId: bigint, recipient: string];
  export interface OutputObject {
    distributionId: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BonusClaimedEvent {
  export type InputTuple = [
    distributionId: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [distributionId: bigint, recipient: string];
  export interface OutputObject {
    distributionId: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributionCreatedEvent {
  export type InputTuple = [
    distributionId: BigNumberish,
    title: string,
    totalBudget: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    distributionId: bigint,
    title: string,
    totalBudget: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    distributionId: bigint;
    title: string;
    totalBudget: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributionFinalizedEvent {
  export type InputTuple = [
    distributionId: BigNumberish,
    totalDistributed: BigNumberish
  ];
  export type OutputTuple = [distributionId: bigint, totalDistributed: bigint];
  export interface OutputObject {
    distributionId: bigint;
    totalDistributed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerAuthorizedEvent {
  export type InputTuple = [manager: AddressLike];
  export type OutputTuple = [manager: string];
  export interface OutputObject {
    manager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerRevokedEvent {
  export type InputTuple = [manager: AddressLike];
  export type OutputTuple = [manager: string];
  export interface OutputObject {
    manager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AnonymousBonusDistribution extends BaseContract {
  connect(runner?: ContractRunner | null): AnonymousBonusDistribution;
  waitForDeployment(): Promise<this>;

  interface: AnonymousBonusDistributionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  allocateBonus: TypedContractMethod<
    [
      distributionId: BigNumberish,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  authorizedManagers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  bonuses: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, boolean, boolean, bigint] & {
        encryptedAmount: string;
        hasBeenSet: boolean;
        hasClaimed: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  calculateTaxBracket: TypedContractMethod<
    [amount: BytesLike],
    [string],
    "nonpayable"
  >;

  claimBonus: TypedContractMethod<
    [distributionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createDistribution: TypedContractMethod<
    [title: string, totalBudget: BigNumberish, durationInDays: BigNumberish],
    [void],
    "nonpayable"
  >;

  currentDistributionId: TypedContractMethod<[], [bigint], "view">;

  distributionRounds: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, boolean, bigint, bigint] & {
        id: bigint;
        title: string;
        totalBudget: bigint;
        distributedAmount: bigint;
        isActive: boolean;
        isFinalized: boolean;
        createdAt: bigint;
        deadline: bigint;
      }
    ],
    "view"
  >;

  finalizeDistribution: TypedContractMethod<
    [distributionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBonusStatus: TypedContractMethod<
    [distributionId: BigNumberish, employee: AddressLike],
    [
      [boolean, boolean, bigint] & {
        hasBonus: boolean;
        hasClaimed: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getCurrentDistributionId: TypedContractMethod<[], [bigint], "view">;

  getDistributionInfo: TypedContractMethod<
    [distributionId: BigNumberish],
    [
      [string, bigint, boolean, boolean, bigint, bigint, bigint] & {
        title: string;
        totalBudget: bigint;
        isActive: boolean;
        isFinalized: boolean;
        createdAt: bigint;
        deadline: bigint;
        recipientCount: bigint;
      }
    ],
    "view"
  >;

  getDistributionRecipients: TypedContractMethod<
    [distributionId: BigNumberish],
    [string[]],
    "view"
  >;

  getMyEncryptedBonus: TypedContractMethod<
    [distributionId: BigNumberish],
    [bigint],
    "view"
  >;

  hasReceivedBonus: TypedContractMethod<
    [distributionId: BigNumberish, recipient: AddressLike],
    [boolean],
    "view"
  >;

  isAuthorizedManager: TypedContractMethod<
    [manager: AddressLike],
    [boolean],
    "view"
  >;

  setManagerAuthorization: TypedContractMethod<
    [manager: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allocateBonus"
  ): TypedContractMethod<
    [
      distributionId: BigNumberish,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedManagers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bonuses"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, boolean, boolean, bigint] & {
        encryptedAmount: string;
        hasBeenSet: boolean;
        hasClaimed: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateTaxBracket"
  ): TypedContractMethod<[amount: BytesLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "claimBonus"
  ): TypedContractMethod<[distributionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createDistribution"
  ): TypedContractMethod<
    [title: string, totalBudget: BigNumberish, durationInDays: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentDistributionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "distributionRounds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, boolean, bigint, bigint] & {
        id: bigint;
        title: string;
        totalBudget: bigint;
        distributedAmount: bigint;
        isActive: boolean;
        isFinalized: boolean;
        createdAt: bigint;
        deadline: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "finalizeDistribution"
  ): TypedContractMethod<[distributionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBonusStatus"
  ): TypedContractMethod<
    [distributionId: BigNumberish, employee: AddressLike],
    [
      [boolean, boolean, bigint] & {
        hasBonus: boolean;
        hasClaimed: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentDistributionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDistributionInfo"
  ): TypedContractMethod<
    [distributionId: BigNumberish],
    [
      [string, bigint, boolean, boolean, bigint, bigint, bigint] & {
        title: string;
        totalBudget: bigint;
        isActive: boolean;
        isFinalized: boolean;
        createdAt: bigint;
        deadline: bigint;
        recipientCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDistributionRecipients"
  ): TypedContractMethod<[distributionId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMyEncryptedBonus"
  ): TypedContractMethod<[distributionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasReceivedBonus"
  ): TypedContractMethod<
    [distributionId: BigNumberish, recipient: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuthorizedManager"
  ): TypedContractMethod<[manager: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setManagerAuthorization"
  ): TypedContractMethod<
    [manager: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BonusAllocated"
  ): TypedContractEvent<
    BonusAllocatedEvent.InputTuple,
    BonusAllocatedEvent.OutputTuple,
    BonusAllocatedEvent.OutputObject
  >;
  getEvent(
    key: "BonusClaimed"
  ): TypedContractEvent<
    BonusClaimedEvent.InputTuple,
    BonusClaimedEvent.OutputTuple,
    BonusClaimedEvent.OutputObject
  >;
  getEvent(
    key: "DistributionCreated"
  ): TypedContractEvent<
    DistributionCreatedEvent.InputTuple,
    DistributionCreatedEvent.OutputTuple,
    DistributionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DistributionFinalized"
  ): TypedContractEvent<
    DistributionFinalizedEvent.InputTuple,
    DistributionFinalizedEvent.OutputTuple,
    DistributionFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "ManagerAuthorized"
  ): TypedContractEvent<
    ManagerAuthorizedEvent.InputTuple,
    ManagerAuthorizedEvent.OutputTuple,
    ManagerAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "ManagerRevoked"
  ): TypedContractEvent<
    ManagerRevokedEvent.InputTuple,
    ManagerRevokedEvent.OutputTuple,
    ManagerRevokedEvent.OutputObject
  >;

  filters: {
    "BonusAllocated(uint256,address)": TypedContractEvent<
      BonusAllocatedEvent.InputTuple,
      BonusAllocatedEvent.OutputTuple,
      BonusAllocatedEvent.OutputObject
    >;
    BonusAllocated: TypedContractEvent<
      BonusAllocatedEvent.InputTuple,
      BonusAllocatedEvent.OutputTuple,
      BonusAllocatedEvent.OutputObject
    >;

    "BonusClaimed(uint256,address)": TypedContractEvent<
      BonusClaimedEvent.InputTuple,
      BonusClaimedEvent.OutputTuple,
      BonusClaimedEvent.OutputObject
    >;
    BonusClaimed: TypedContractEvent<
      BonusClaimedEvent.InputTuple,
      BonusClaimedEvent.OutputTuple,
      BonusClaimedEvent.OutputObject
    >;

    "DistributionCreated(uint256,string,uint256,uint256)": TypedContractEvent<
      DistributionCreatedEvent.InputTuple,
      DistributionCreatedEvent.OutputTuple,
      DistributionCreatedEvent.OutputObject
    >;
    DistributionCreated: TypedContractEvent<
      DistributionCreatedEvent.InputTuple,
      DistributionCreatedEvent.OutputTuple,
      DistributionCreatedEvent.OutputObject
    >;

    "DistributionFinalized(uint256,uint256)": TypedContractEvent<
      DistributionFinalizedEvent.InputTuple,
      DistributionFinalizedEvent.OutputTuple,
      DistributionFinalizedEvent.OutputObject
    >;
    DistributionFinalized: TypedContractEvent<
      DistributionFinalizedEvent.InputTuple,
      DistributionFinalizedEvent.OutputTuple,
      DistributionFinalizedEvent.OutputObject
    >;

    "ManagerAuthorized(address)": TypedContractEvent<
      ManagerAuthorizedEvent.InputTuple,
      ManagerAuthorizedEvent.OutputTuple,
      ManagerAuthorizedEvent.OutputObject
    >;
    ManagerAuthorized: TypedContractEvent<
      ManagerAuthorizedEvent.InputTuple,
      ManagerAuthorizedEvent.OutputTuple,
      ManagerAuthorizedEvent.OutputObject
    >;

    "ManagerRevoked(address)": TypedContractEvent<
      ManagerRevokedEvent.InputTuple,
      ManagerRevokedEvent.OutputTuple,
      ManagerRevokedEvent.OutputObject
    >;
    ManagerRevoked: TypedContractEvent<
      ManagerRevokedEvent.InputTuple,
      ManagerRevokedEvent.OutputTuple,
      ManagerRevokedEvent.OutputObject
    >;
  };
}
